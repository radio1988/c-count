configfile: "config.yaml"
import os

SAMPLES=config["SAMPLES"]
FORMAT=config["FORMAT"]
WEIGHT1=config["WEIGHT1"]
WEIGHT2=config["WEIGHT2"]
WKDIR=os.getcwd()

shell.prefix("""
            # placeholder
            """)

rule targets:
    input:
        img=expand("res/img/jpg/{s}.jpg", s=SAMPLES),  # czi2img
        blobs=expand("res/blobs/{s}.npy.gz", s=SAMPLES),  # blob_detection
        view0=expand("res/blobs/{s}.html", s=SAMPLES),  # rand samples of detected blobs
        count1="res/classification1/COUNT1.txt",  # count from weight1
        view1=expand("res/classification1/{s}.html", s=SAMPLES), # view weight1-pos
        area1=expand("res/classification1/{s}.area.txt", s=SAMPLES),

rule czi2img:
    input:
        "data/{s}.czi"
    output:
        "res/img/jpg/{s}.jpg",
        "res/img/equ/{s}.equ.jpg",
    priority: 
        0
    threads:
        1
    log:
        "res/img/log/{s}.log"
    benchmark:
        "res/img/log/{s}.tsv"
    params:
        mem='40000'
    shell:
        """
        python scripts/czi2img.py -i {input} -f {FORMAT} -odir res/img &> {log}
        """
    
rule blob_detection:
    input:
        "data/{s}.czi"
    output:
        "res/blobs/{s}.npy.gz"
    priority:
        100
    threads:
        1
    log:
        "res/blobs/{s}.log"
    benchmark:
        "res/blobs/{s}.tsv"
    params:
        mem="45000"
    shell:
        """
        python scripts/blob_detection.py -i {input} -f {FORMAT} -odir res/blobs/ &> {log}
        """

rule view0:
    input:
        "res/blobs/{s}.npy.gz"
    output:
        nb="res/blobs/{s}.ipynb",
        html="res/blobs/{s}.html"
    log:
        "res/blobs/{s}.html.log"
    benchmark:
        "res/blobs/{s}.html.tsv"
    threads:
        1
    params:
        mem="8000"
    shell:
        """
        fname={input} dir={WKDIR} runipy scripts/viewing_blobs.ipynb {output.nb} &> {log}
        jupyter nbconvert --to html {output.nb} &>> {log}
        """

rule classification1:
    input:
        db="res/blobs/{s}.npy.gz",
        weight=WEIGHT1
    output:
#        yes="res/classification1/{s}.yes.npy.gz",
        all="res/classification1/{s}.pred.npy.gz",
    log:
        "res/classification1/{s}.log"
    benchmark:
        "res/classification1/{s}.tsv"
    threads:
        1
    params:
        mem="8000"
    shell:
        """
        python scripts/classification.pred.py  -db {input.db} -o res/classification1 -l 1 -w {input.weight} &> {log}
        """

rule view1:
    input:
        "res/classification1/{s}.pred.npy.gz"
    output:
        nb="res/classification1/{s}.ipynb",
        html="res/classification1/{s}.html"
    log:
        "res/classification1/{s}.html.log"
    benchmark:
        "res/classification1/{s}.html.tsv"
    threads:
        1
    params:
        mem="8000"
    shell:
        """
        fname={input} dir={WKDIR} runipy scripts/viewing_blobs.ipynb {output.nb} &> {log}
        jupyter nbconvert --to html {output.nb} &>> {log}
        """

rule count1:
    input:
        expand("res/classification1/{s}.log", s=SAMPLES)
    output:
        "res/classification1/COUNT1.txt"
    threads:
        1
    params:
        mem="1000"
    shell:
        """
        grep 'Predictions' {input} > {output}
        """

rule area_calculation1:
    input:
        "res/classification1/{s}.pred.npy.gz"
    output:
        "res/classification1/{s}.area.txt"
    log:
        "res/classification1/{s}.area.log"
    benchmark:
        "res/classification1/{s}.area.tsv"
    threads:
        1
    params:
        mem="8000"
    shell:
        """
        python scripts/area_calculation.py {input} 1 {output} &> {log}
        """


rule filter2:
    input:
        "res/classification1/{s}.yes.npy.gz"
    output:
        yes="res/filter2/{s}.yes.yes.npy.gz",
        all="res/filter2/{s}.yes.pred.npy.gz",
        log="res/filter2/{s}.log"
    benchmark:
        "res/filter2/{s}.tsv"
    threads:
        1
    params:
        mem="8000"
    shell:
        """
        python scripts/classification.py  -db {input} -o res/filter2 -l 1 -w {WEIGHT2} &> {output.log}
        """



rule count2:
    input:
        expand("res/filter2/{s}.log", s=SAMPLES)
    output:
        "res/filter2/COUNT2.txt"
    threads:
        1
    params:
        mem="1000"
    shell:
        """
        grep 'Predictions' {input} > {output}
        """



rule view2:
    input:
        "res/filter2/{s}.yes.pred.npy.gz"
    output:
        nb="res/filter2/{s}.ipynb",
        html="res/filter2/{s}.html"
    log:
        "res/filter2/{s}.html.log"
    benchmark:
        "res/filter2/{s}.html.tsv"
    threads:
        1
    params:
        mem="8000"
    shell:
        """
        fname={input} dir={WKDIR} runipy scripts/viewing_blobs.ipynb {output.nb} &> {log}
        jupyter nbconvert --to html {output.nb} &>> {log}
        """


